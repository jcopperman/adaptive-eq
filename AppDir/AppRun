#!/bin/bash
# Export path to include our libraries
export APPDIR="$(dirname "$(readlink -f "$0")")"
export XDG_DATA_DIRS="${APPDIR}/usr/share:${XDG_DATA_DIRS:-/usr/local/share:/usr/share}"
export LD_LIBRARY_PATH="${APPDIR}/usr/lib:${LD_LIBRARY_PATH}"
export PATH="${APPDIR}/usr/bin:${PATH}"
export ADAPTIVE_EQ_LOG_LEVEL="${ADAPTIVE_EQ_LOG_LEVEL:-info}"

# Define colors for better readability
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Print banner
echo -e "${BLUE}=== Adaptive EQ ===${NC}"

# Create config directory if it doesn't exist
mkdir -p "${HOME}/.config/adaptive-eq"
mkdir -p "${HOME}/.cache/adaptive-eq/logs"

# If this is the first run, copy the config files
if [ ! -f "${HOME}/.config/adaptive-eq/eq_profiles.json" ]; then
    echo -e "${BLUE}Setting up initial configuration...${NC}"
    mkdir -p "${HOME}/.config/adaptive-eq"
    cp -r "${APPDIR}/usr/share/adaptive-eq/config/"* "${HOME}/.config/adaptive-eq/"
    echo -e "${GREEN}âœ“ Configuration files created${NC}"
fi

# Check for Spotify credentials
if [ ! -f "${HOME}/.adaptive-eq-credentials" ]; then
    echo -e "${YELLOW}Warning: Spotify credentials not found.${NC}"
    echo -e "The application will not be able to connect to Spotify."
    echo ""
    echo -e "Would you like to configure Spotify credentials now? (y/n)"
    read -r answer
    if [[ "$answer" =~ ^[Yy]$ ]]; then
        echo "Please enter your Spotify API Client ID:"
        read -r client_id
        echo "Please enter your Spotify API Client Secret:"
        read -r client_secret
        
        mkdir -p "${HOME}/.config/adaptive-eq"
        cat > "${HOME}/.adaptive-eq-credentials" << EOC
# Spotify API credentials
export SPOTIFY_CLIENT_ID='${client_id}'
export SPOTIFY_CLIENT_SECRET='${client_secret}'
export SPOTIFY_REDIRECT_URI='http://localhost:8888/callback'
EOC
        chmod 600 "${HOME}/.adaptive-eq-credentials"
        echo -e "${GREEN}Credentials saved to ${HOME}/.adaptive-eq-credentials${NC}"
        
        # Source the credentials for this session
        source "${HOME}/.adaptive-eq-credentials"
    else
        echo -e "${YELLOW}You can set up credentials later by editing ${HOME}/.adaptive-eq-credentials${NC}"
    fi
fi

# Check for EasyEffects
if ! command -v easyeffects &> /dev/null; then
    echo -e "${YELLOW}Warning: EasyEffects not found.${NC}"
    echo -e "This application requires EasyEffects to function properly."
    echo -e "Please install it using your distribution's package manager."
    echo ""
    echo -e "For example:"
    echo -e "${BLUE}  sudo apt install easyeffects     # Debian/Ubuntu${NC}"
    echo -e "${BLUE}  sudo dnf install easyeffects     # Fedora${NC}"
    echo -e "${BLUE}  sudo pacman -S easyeffects       # Arch Linux${NC}"
    echo ""
    echo -e "Press Enter to continue anyway, or Ctrl+C to exit."
    read
fi

# Check for force-refresh flag and show tip
if [[ "$*" == *"--force-refresh"* ]]; then
    echo -e "${GREEN}Running with force-refresh enabled for better EasyEffects UI synchronization${NC}"
else
    echo -e "${BLUE}Tip: If EQ presets don't show up in EasyEffects UI, try:${NC}"
    echo -e "${BLUE}  - Running with --force-refresh flag${NC}"
    echo -e "${BLUE}  - Using the 'Force EasyEffects Refresh' menu option${NC}"
    echo -e "${BLUE}  - For more help, see the troubleshooting guide${NC}"
fi

echo -e "${GREEN}Starting Adaptive EQ...${NC}"
# Run the application wrapper
exec "${APPDIR}/usr/bin/adaptive-eq-wrapper" "$@"
